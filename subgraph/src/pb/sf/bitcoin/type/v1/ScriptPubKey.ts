// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.25.1

import { Writer, Reader } from "as-proto/assembly";

export class ScriptPubKey {
  static encode(message: ScriptPubKey, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.asm);

    writer.uint32(18);
    writer.string(message.hex);

    writer.uint32(24);
    writer.int32(message.reqSigs);

    writer.uint32(34);
    writer.string(message.type);

    writer.uint32(42);
    writer.string(message.address);

    const addresses = message.addresses;
    if (addresses.length !== 0) {
      for (let i: i32 = 0; i < addresses.length; ++i) {
        writer.uint32(50);
        writer.string(addresses[i]);
      }
    }
  }

  static decode(reader: Reader, length: i32): ScriptPubKey {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ScriptPubKey();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.asm = reader.string();
          break;

        case 2:
          message.hex = reader.string();
          break;

        case 3:
          message.reqSigs = reader.int32();
          break;

        case 4:
          message.type = reader.string();
          break;

        case 5:
          message.address = reader.string();
          break;

        case 6:
          message.addresses.push(reader.string());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  asm: string;
  hex: string;
  reqSigs: i32;
  type: string;
  address: string;
  addresses: Array<string>;

  constructor(
    asm: string = "",
    hex: string = "",
    reqSigs: i32 = 0,
    type: string = "",
    address: string = "",
    addresses: Array<string> = []
  ) {
    this.asm = asm;
    this.hex = hex;
    this.reqSigs = reqSigs;
    this.type = type;
    this.address = address;
    this.addresses = addresses;
  }
}
