// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.25.1

import { Writer, Reader } from "as-proto/assembly";
import { Transaction } from "./Transaction";

export class Block {
  static encode(message: Block, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.hash);

    writer.uint32(24);
    writer.int32(message.size);

    writer.uint32(32);
    writer.int32(message.strippedSize);

    writer.uint32(40);
    writer.int32(message.weight);

    writer.uint32(48);
    writer.int64(message.height);

    writer.uint32(56);
    writer.int32(message.version);

    writer.uint32(66);
    writer.string(message.versionHex);

    writer.uint32(74);
    writer.string(message.merkleRoot);

    const tx = message.tx;
    for (let i: i32 = 0; i < tx.length; ++i) {
      writer.uint32(82);
      writer.fork();
      Transaction.encode(tx[i], writer);
      writer.ldelim();
    }

    writer.uint32(88);
    writer.int64(message.time);

    writer.uint32(96);
    writer.int64(message.mediantime);

    writer.uint32(104);
    writer.uint32(message.nonce);

    writer.uint32(114);
    writer.string(message.bits);

    writer.uint32(121);
    writer.double(message.difficulty);

    writer.uint32(130);
    writer.string(message.chainwork);

    writer.uint32(136);
    writer.uint32(message.nTx);

    writer.uint32(146);
    writer.string(message.previousHash);
  }

  static decode(reader: Reader, length: i32): Block {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Block();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.hash = reader.string();
          break;

        case 3:
          message.size = reader.int32();
          break;

        case 4:
          message.strippedSize = reader.int32();
          break;

        case 5:
          message.weight = reader.int32();
          break;

        case 6:
          message.height = reader.int64();
          break;

        case 7:
          message.version = reader.int32();
          break;

        case 8:
          message.versionHex = reader.string();
          break;

        case 9:
          message.merkleRoot = reader.string();
          break;

        case 10:
          message.tx.push(Transaction.decode(reader, reader.uint32()));
          break;

        case 11:
          message.time = reader.int64();
          break;

        case 12:
          message.mediantime = reader.int64();
          break;

        case 13:
          message.nonce = reader.uint32();
          break;

        case 14:
          message.bits = reader.string();
          break;

        case 15:
          message.difficulty = reader.double();
          break;

        case 16:
          message.chainwork = reader.string();
          break;

        case 17:
          message.nTx = reader.uint32();
          break;

        case 18:
          message.previousHash = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  hash: string;
  size: i32;
  strippedSize: i32;
  weight: i32;
  height: i64;
  version: i32;
  versionHex: string;
  merkleRoot: string;
  tx: Array<Transaction>;
  time: i64;
  mediantime: i64;
  nonce: u32;
  bits: string;
  difficulty: f64;
  chainwork: string;
  nTx: u32;
  previousHash: string;

  constructor(
    hash: string = "",
    size: i32 = 0,
    strippedSize: i32 = 0,
    weight: i32 = 0,
    height: i64 = 0,
    version: i32 = 0,
    versionHex: string = "",
    merkleRoot: string = "",
    tx: Array<Transaction> = [],
    time: i64 = 0,
    mediantime: i64 = 0,
    nonce: u32 = 0,
    bits: string = "",
    difficulty: f64 = 0.0,
    chainwork: string = "",
    nTx: u32 = 0,
    previousHash: string = ""
  ) {
    this.hash = hash;
    this.size = size;
    this.strippedSize = strippedSize;
    this.weight = weight;
    this.height = height;
    this.version = version;
    this.versionHex = versionHex;
    this.merkleRoot = merkleRoot;
    this.tx = tx;
    this.time = time;
    this.mediantime = mediantime;
    this.nonce = nonce;
    this.bits = bits;
    this.difficulty = difficulty;
    this.chainwork = chainwork;
    this.nTx = nTx;
    this.previousHash = previousHash;
  }
}
