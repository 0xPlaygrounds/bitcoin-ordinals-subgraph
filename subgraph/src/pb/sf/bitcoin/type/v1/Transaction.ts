// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.25.1

import { Writer, Reader } from "as-proto/assembly";
import { Vin } from "./Vin";
import { Vout } from "./Vout";

export class Transaction {
  static encode(message: Transaction, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.hex);

    writer.uint32(18);
    writer.string(message.txid);

    writer.uint32(26);
    writer.string(message.hash);

    writer.uint32(32);
    writer.int32(message.size);

    writer.uint32(40);
    writer.int32(message.vsize);

    writer.uint32(48);
    writer.int32(message.weight);

    writer.uint32(56);
    writer.uint32(message.version);

    writer.uint32(64);
    writer.uint32(message.locktime);

    const vin = message.vin;
    for (let i: i32 = 0; i < vin.length; ++i) {
      writer.uint32(74);
      writer.fork();
      Vin.encode(vin[i], writer);
      writer.ldelim();
    }

    const vout = message.vout;
    for (let i: i32 = 0; i < vout.length; ++i) {
      writer.uint32(82);
      writer.fork();
      Vout.encode(vout[i], writer);
      writer.ldelim();
    }

    writer.uint32(90);
    writer.string(message.blockhash);

    writer.uint32(96);
    writer.int64(message.blocktime);
  }

  static decode(reader: Reader, length: i32): Transaction {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Transaction();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.hex = reader.string();
          break;

        case 2:
          message.txid = reader.string();
          break;

        case 3:
          message.hash = reader.string();
          break;

        case 4:
          message.size = reader.int32();
          break;

        case 5:
          message.vsize = reader.int32();
          break;

        case 6:
          message.weight = reader.int32();
          break;

        case 7:
          message.version = reader.uint32();
          break;

        case 8:
          message.locktime = reader.uint32();
          break;

        case 9:
          message.vin.push(Vin.decode(reader, reader.uint32()));
          break;

        case 10:
          message.vout.push(Vout.decode(reader, reader.uint32()));
          break;

        case 11:
          message.blockhash = reader.string();
          break;

        case 12:
          message.blocktime = reader.int64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  hex: string;
  txid: string;
  hash: string;
  size: i32;
  vsize: i32;
  weight: i32;
  version: u32;
  locktime: u32;
  vin: Array<Vin>;
  vout: Array<Vout>;
  blockhash: string;
  blocktime: i64;

  constructor(
    hex: string = "",
    txid: string = "",
    hash: string = "",
    size: i32 = 0,
    vsize: i32 = 0,
    weight: i32 = 0,
    version: u32 = 0,
    locktime: u32 = 0,
    vin: Array<Vin> = [],
    vout: Array<Vout> = [],
    blockhash: string = "",
    blocktime: i64 = 0
  ) {
    this.hex = hex;
    this.txid = txid;
    this.hash = hash;
    this.size = size;
    this.vsize = vsize;
    this.weight = weight;
    this.version = version;
    this.locktime = locktime;
    this.vin = vin;
    this.vout = vout;
    this.blockhash = blockhash;
    this.blocktime = blocktime;
  }
}
