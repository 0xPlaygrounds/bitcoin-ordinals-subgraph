// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.25.1

import { Writer, Reader } from "as-proto/assembly";

export class Inscription {
  static encode(message: Inscription, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.id);

    writer.uint32(18);
    writer.string(message.contentType);

    writer.uint32(24);
    writer.int64(message.pointer);

    writer.uint32(34);
    writer.string(message.parent);

    writer.uint32(42);
    writer.string(message.metadata);

    writer.uint32(50);
    writer.string(message.metaprotocol);

    writer.uint32(58);
    writer.string(message.contentEncoding);

    writer.uint32(66);
    writer.string(message.content);
  }

  static decode(reader: Reader, length: i32): Inscription {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Inscription();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.id = reader.string();
          break;

        case 2:
          message.contentType = reader.string();
          break;

        case 3:
          message.pointer = reader.int64();
          break;

        case 4:
          message.parent = reader.string();
          break;

        case 5:
          message.metadata = reader.string();
          break;

        case 6:
          message.metaprotocol = reader.string();
          break;

        case 7:
          message.contentEncoding = reader.string();
          break;

        case 8:
          message.content = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  id: string;
  contentType: string;
  pointer: i64;
  parent: string;
  metadata: string;
  metaprotocol: string;
  contentEncoding: string;
  content: string;

  constructor(
    id: string = "",
    contentType: string = "",
    pointer: i64 = 0,
    parent: string = "",
    metadata: string = "",
    metaprotocol: string = "",
    contentEncoding: string = "",
    content: string = ""
  ) {
    this.id = id;
    this.contentType = contentType;
    this.pointer = pointer;
    this.parent = parent;
    this.metadata = metadata;
    this.metaprotocol = metaprotocol;
    this.contentEncoding = contentEncoding;
    this.content = content;
  }
}
