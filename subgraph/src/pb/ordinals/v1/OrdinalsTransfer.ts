// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.25.1

import { Writer, Reader } from "as-proto/assembly";
import { Ordinals } from "./Ordinals";

export class OrdinalsTransfer {
  static encode(message: OrdinalsTransfer, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.inputUtxo);

    writer.uint32(18);
    writer.string(message.outputUtxo);

    const ordinals = message.ordinals;
    if (ordinals !== null) {
      writer.uint32(26);
      writer.fork();
      Ordinals.encode(ordinals, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): OrdinalsTransfer {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new OrdinalsTransfer();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.inputUtxo = reader.string();
          break;

        case 2:
          message.outputUtxo = reader.string();
          break;

        case 3:
          message.ordinals = Ordinals.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  inputUtxo: string;
  outputUtxo: string;
  ordinals: Ordinals | null;

  constructor(
    inputUtxo: string = "",
    outputUtxo: string = "",
    ordinals: Ordinals | null = null
  ) {
    this.inputUtxo = inputUtxo;
    this.outputUtxo = outputUtxo;
    this.ordinals = ordinals;
  }
}
