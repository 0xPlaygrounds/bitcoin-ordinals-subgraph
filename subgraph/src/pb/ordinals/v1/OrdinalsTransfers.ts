// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.25.1

import { Writer, Reader } from "as-proto/assembly";
import { OrdinalsAssignment } from "./OrdinalsAssignment";

export class OrdinalsTransfers {
  static encode(message: OrdinalsTransfers, writer: Writer): void {
    const inputUtxos = message.inputUtxos;
    if (inputUtxos.length !== 0) {
      for (let i: i32 = 0; i < inputUtxos.length; ++i) {
        writer.uint32(10);
        writer.string(inputUtxos[i]);
      }
    }

    const relativeAssignments = message.relativeAssignments;
    for (let i: i32 = 0; i < relativeAssignments.length; ++i) {
      writer.uint32(18);
      writer.fork();
      OrdinalsAssignment.encode(relativeAssignments[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): OrdinalsTransfers {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new OrdinalsTransfers();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.inputUtxos.push(reader.string());
          break;

        case 2:
          message.relativeAssignments.push(
            OrdinalsAssignment.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  inputUtxos: Array<string>;
  relativeAssignments: Array<OrdinalsAssignment>;

  constructor(
    inputUtxos: Array<string> = [],
    relativeAssignments: Array<OrdinalsAssignment> = []
  ) {
    this.inputUtxos = inputUtxos;
    this.relativeAssignments = relativeAssignments;
  }
}
