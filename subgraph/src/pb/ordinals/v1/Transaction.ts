// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.25.1

import { Writer, Reader } from "as-proto/assembly";
import { OrdinalsBlockAssignment } from "./OrdinalsBlockAssignment";
import { Inscription } from "./Inscription";

export class Transaction {
  static encode(message: Transaction, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.txid);

    writer.uint32(16);
    writer.int64(message.idx);

    writer.uint32(24);
    writer.int64(message.amount);

    const assignments = message.assignments;
    for (let i: i32 = 0; i < assignments.length; ++i) {
      writer.uint32(34);
      writer.fork();
      OrdinalsBlockAssignment.encode(assignments[i], writer);
      writer.ldelim();
    }

    const inputUtxos = message.inputUtxos;
    if (inputUtxos.length !== 0) {
      for (let i: i32 = 0; i < inputUtxos.length; ++i) {
        writer.uint32(42);
        writer.string(inputUtxos[i]);
      }
    }

    const relativeAssignments = message.relativeAssignments;
    for (let i: i32 = 0; i < relativeAssignments.length; ++i) {
      writer.uint32(50);
      writer.fork();
      OrdinalsBlockAssignment.encode(relativeAssignments[i], writer);
      writer.ldelim();
    }

    const inscriptions = message.inscriptions;
    for (let i: i32 = 0; i < inscriptions.length; ++i) {
      writer.uint32(58);
      writer.fork();
      Inscription.encode(inscriptions[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Transaction {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Transaction();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.txid = reader.string();
          break;

        case 2:
          message.idx = reader.int64();
          break;

        case 3:
          message.amount = reader.int64();
          break;

        case 4:
          message.assignments.push(
            OrdinalsBlockAssignment.decode(reader, reader.uint32())
          );
          break;

        case 5:
          message.inputUtxos.push(reader.string());
          break;

        case 6:
          message.relativeAssignments.push(
            OrdinalsBlockAssignment.decode(reader, reader.uint32())
          );
          break;

        case 7:
          message.inscriptions.push(
            Inscription.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  txid: string;
  idx: i64;
  amount: i64;
  assignments: Array<OrdinalsBlockAssignment>;
  inputUtxos: Array<string>;
  relativeAssignments: Array<OrdinalsBlockAssignment>;
  inscriptions: Array<Inscription>;

  constructor(
    txid: string = "",
    idx: i64 = 0,
    amount: i64 = 0,
    assignments: Array<OrdinalsBlockAssignment> = [],
    inputUtxos: Array<string> = [],
    relativeAssignments: Array<OrdinalsBlockAssignment> = [],
    inscriptions: Array<Inscription> = []
  ) {
    this.txid = txid;
    this.idx = idx;
    this.amount = amount;
    this.assignments = assignments;
    this.inputUtxos = inputUtxos;
    this.relativeAssignments = relativeAssignments;
    this.inscriptions = inscriptions;
  }
}
