// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.25.1

import { Writer, Reader } from "as-proto/assembly";
import { OrdinalsAssignment } from "./OrdinalsAssignment";
import { OrdinalsTransfers } from "./OrdinalsTransfers";

export class Transaction {
  static encode(message: Transaction, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.txid);

    writer.uint32(16);
    writer.uint64(message.idx);

    const assigments = message.assigments;
    for (let i: i32 = 0; i < assigments.length; ++i) {
      writer.uint32(26);
      writer.fork();
      OrdinalsAssignment.encode(assigments[i], writer);
      writer.ldelim();
    }

    const transfers = message.transfers;
    if (transfers !== null) {
      writer.uint32(34);
      writer.fork();
      OrdinalsTransfers.encode(transfers, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Transaction {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Transaction();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.txid = reader.string();
          break;

        case 2:
          message.idx = reader.uint64();
          break;

        case 3:
          message.assigments.push(
            OrdinalsAssignment.decode(reader, reader.uint32())
          );
          break;

        case 4:
          message.transfers = OrdinalsTransfers.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  txid: string;
  idx: u64;
  assigments: Array<OrdinalsAssignment>;
  transfers: OrdinalsTransfers | null;

  constructor(
    txid: string = "",
    idx: u64 = 0,
    assigments: Array<OrdinalsAssignment> = [],
    transfers: OrdinalsTransfers | null = null
  ) {
    this.txid = txid;
    this.idx = idx;
    this.assigments = assigments;
    this.transfers = transfers;
  }
}
